install-deps:
    #!/bin/bash
    set -e

    # Source distro info
    if [ -f /etc/os-release ]; then
        . /etc/os-release
    else
        echo "Cannot detect OS."
        exit 1
    fi

    echo "Detected distro: ID=$ID, ID_LIKE=$ID_LIKE"

    # Normalize variables (in case ID_LIKE is a space-separated list)
    DISTRO="$ID $ID_LIKE"

    if echo "$DISTRO" | grep -qE 'debian|ubuntu'; then
        echo "Installing debian/ubuntu dependencies with apt..."
        sudo apt update && sudo apt install -y \
          build-essential \
          cargo \
          cmake \
          # X11 and graphical environment
          libx11-dev libxfixes-dev libxau-dev libxcb1-dev libxkbcommon-dev libxkbcommon-x11-dev \
          libegl-dev libgl-dev libgbm-dev libdrm-dev \
          # Font and text rendering
          libfontconfig1-dev libfreetype6-dev libharfbuzz-dev libgraphite2-dev \
          libxml2-dev libexpat1-dev libpcre2-dev \
          # Compression and encoding
          zlib1g-dev libbz2-dev libpng-dev libbrotli-dev liblzma-dev \
          # C++ standard library
          libstdc++-dev \
          # GLib and related system libraries
          libglib2.0-dev libgudev-1.0-0 libffi8 \
          # Input and device libraries
          libudev1 libinput10 libcap2 libmtdev1 libevdev2 libwacom9

    elif echo "$DISTRO" | grep -qE 'fedora'; then
        echo "Installing fedora dependencies with dnf..."
          # Install development tools group
          sudo dnf group install -y development-tools \
          # Install individual packages grouped by functionality
          sudo dnf install -y \
            # Build tools
            cargo cmake \
            # X11 and graphical system
            libX11-devel libXfixes-devel libxcb-devel libxcb-xkb libxkbcommon-devel \
            mesa-libEGL-devel mesa-libGLES-devel xcb-util-devel libXau-devel \
            # Wayland and OpenXR support
            wayland-devel openxr-devel \
            # Fonts and text rendering
            fontconfig-devel freetype-devel harfbuzz-devel graphite2-devel \
            # System and runtime libraries
            systemd-libs glib2-devel libstdc++ libffi libgudev \
            # Compression and encoding
            bzip2-devel xz-devel libpng-devel brotli-devel expat-devel \
            # Parsing and pattern matching
            libxml2-devel pcre2-devel jsoncpp-devel \
            # Input and device libraries
            libinput libcap mtdev libevdev libwacom

    elif echo "$DISTRO" | grep -q 'arch'; then
        echo "Installing arch dependencies with pacman..."
        sudo pacman -Sy --noconfirm \
          cargo \ 
          cmake \
          sudo pacman -Syu --needed \
          # X11 and graphical environment
          libx11 libxfixes libxau libxcb libxkbcommon libxkbcommon-x11 \
          mesa \
          # Fonts and text rendering
          fontconfig freetype2 harfbuzz graphite \
          libxml2 expat pcre2 \
          # Compression and encoding
          zlib bzip2 libpng brotli xz \
          # GLib and system libs
          glib2 libgudev libffi systemd \
          # Input and device handling
          libinput libcap mtdev libevdev libwacom

    else
        echo "Unsupported distro: $ID"
        exit 1
    fi


# install all repos into prefix folder
cargo-install-repos:
    #!/usr/bin/env bash
    PREFIX_DIR="./prefix"
    mkdir -p "$PREFIX_DIR"

    # Create/update root .gitignore to exclude the prefix directory
    if [[ ! -f .gitignore ]]; then
      echo "# Automatically generated by install script" > .gitignore
    fi
    if ! grep -q "^/prefix/$" .gitignore; then
      echo "/prefix/" >> .gitignore
      echo "Added /prefix/ to .gitignore"
    fi

    # Recursively find all Rust crates (must have both Cargo.toml AND src/)
    shopt -s globstar
    REPO_DIRS=()
    for dir in **/; do
        if [[ -f "$dir/Cargo.toml" && -d "$dir/src" ]]; then
            REPO_DIRS+=("$dir")
        fi
    done

    # Install all collected crates
    for dir in "${REPO_DIRS[@]}"; do
        echo "Installing from $dir to $PREFIX_DIR"
        cargo install --path "$dir" --root "$PREFIX_DIR" --bins --locked --force
    done

    echo "Successfully processed ${#REPO_DIRS[@]} crates"

atmosphere-activation:
  ./prefix/bin/atmosphere install /atmosphere/default_envs/the_grid

run-stardust-xr:
  dbus-run-session ./prefix/bin/stardust-xr-server -e startup.sh

# Create a new client from template
new-client:
    #!/usr/bin/env bash
    echo "Enter new client name:"
    read -r CLIENT_NAME
    
    # Copy template
    if [ ! -d "client-template" ]; then
        echo "Error: client-template directory not found!"
        exit 1
    fi
    
    cp -r client-template "$CLIENT_NAME"
    
    # Rename crate in Cargo.toml
    sed -i "s/^name = \".*\"/name = \"$CLIENT_NAME\"/" "$CLIENT_NAME/Cargo.toml"
    
    # Install the client
    echo "Installing new client..."
    cargo install --path "$CLIENT_NAME" --root ./prefix --bins --locked --force
    echo "Client '$CLIENT_NAME' created and installed!"

# Update an existing client
update-client:
    #!/usr/bin/env bash
    echo "Enter client name to update:"
    read -r CLIENT_NAME
    
    shopt -s globstar
    FOUND_DIR=""
    for dir in **/; do
        if [[ -f "$dir/Cargo.toml" && -d "$dir/src" ]]; then
            # Check for matching binary files
            if [[ -f "$dir/src/bin/$CLIENT_NAME.rs" || 
                  ( -f "$dir/src/main.rs" && $(grep -oP '^name = "\K[^"]+' "$dir/Cargo.toml") == "$CLIENT_NAME" ) ]]; then
                FOUND_DIR="$dir"
                break
            fi
        fi
    done

    if [[ -z "$FOUND_DIR" ]]; then
        echo "Error: Client '$CLIENT_NAME' not found!"
        echo "Searched for:"
        echo "1. src/bin/$CLIENT_NAME.rs"
        echo "2. crates named '$CLIENT_NAME' with src/main.rs"
        exit 1
    fi
    
    echo "Found client at: $FOUND_DIR"
    echo "Updating client '$CLIENT_NAME'..."
    cargo install --path "$FOUND_DIR" --root ./prefix --bins --locked --force
    echo "Successfully updated client '$CLIENT_NAME'"



